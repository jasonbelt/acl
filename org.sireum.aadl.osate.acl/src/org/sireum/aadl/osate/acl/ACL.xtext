grammar org.sireum.aadl.osate.acl.ACL with org.osate.xtext.aadl2.properties.Properties

generate aCL "http://www.sireum.org/aadl/osate/acl"

import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AnnexSubclause returns aadl2::AnnexSubclause:
	AclSubclause
;

AclSubclause returns AclSubclause:
	{AclSubclause}
	contract=AclContract
;

AclContract:
	{AclContract} (specs+=SpecSection*);

SpecSection:
	ComputationalModel
|	Flows
|	Contract;

ComputationalModel:
	{PeriodicComputationalModel} 'periodic'
|	{HyperperiodComputationalModel} 'hyperperiod' 'with' 
		(constraints+=[aadl2::NamedElement] ('<' constraints+=[aadl2::NamedElement])* )
;

Flows:
	'flows' (flows+=Flow)+
;

Flow:
	=>	flowId=ID ':' 
		srcPorts+=[aadl2::NamedElement] (',' srcPorts+=[aadl2::NamedElement])* '-fun->'
		dstPorts+=[aadl2::NamedElement] (',' dstPorts+=[aadl2::NamedElement])* 
;

Contract:
	'contracts' (specs+=SpecStatement)+
;

SpecStatement:
	{AssumeStatement} 'assume' ('for' forPort=[aadl2::NamedElement])? 
		assumeTitle=STRING ':' pred=PREDICATE ('tracesTo' '<' tracesTo=ID '>')?  
|	{GuaranteeStatement} 'guarantee' guaranteeTitle=STRING ':' expr=Expr
;

PREDICATE: // TODO 
	ID
;

Expr:
	ImpliesExpr
;

ImpliesExpr returns Expr:
	OrExpr (=>({BinaryExpr.left=current} ('=>'|'implies')) right=ImpliesExpr)?
;

OrExpr returns Expr:
	AndExpr (=>({BinaryExpr.left=current} (op='or'|op='orelse')) right=AndExpr)*
;

AndExpr returns Expr:
	RelationalExpr (=>({BinaryExpr.left=current} (op='and'|op='andthen')) right=RelationalExpr)*
;


RelationalOp:
	'<' | '<=' | '>' | '>=' | '=' | '<>'
;
 
RelationalExpr returns Expr:
	PlusExpr (=>({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
;

PlusExpr returns Expr:
	TimesExpr (=>({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*
;

TimesExpr returns Expr:
	ExpExpr (=>({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*	
;

ExpExpr returns Expr:
	PrefixExpr (=>({BinaryExpr.left=current} op=('^')) right=PrefixExpr)*
;

PrefixExpr returns Expr:
	{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
|	AtomicExpr
;

AtomicExpr returns Expr:
	{IdExpr} id=[aadl2::NamedElement | QCREF]
;
