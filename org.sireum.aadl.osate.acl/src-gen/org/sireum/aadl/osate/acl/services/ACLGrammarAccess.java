/*
 * generated by Xtext
 */
package org.sireum.aadl.osate.acl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class ACLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.AnnexSubclause");
		private final RuleCall cAclSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause aadl2::AnnexSubclause:
		//	AclSubclause;
		@Override public ParserRule getRule() { return rule; }

		//AclSubclause
		public RuleCall getAclSubclauseParserRuleCall() { return cAclSubclauseParserRuleCall; }
	}

	public class AclSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.AclSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAclSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractAclContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//AclSubclause:
		//	{AclSubclause} contract=AclContract;
		@Override public ParserRule getRule() { return rule; }

		//{AclSubclause} contract=AclContract
		public Group getGroup() { return cGroup; }

		//{AclSubclause}
		public Action getAclSubclauseAction_0() { return cAclSubclauseAction_0; }

		//contract=AclContract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }

		//AclContract
		public RuleCall getContractAclContractParserRuleCall_1_0() { return cContractAclContractParserRuleCall_1_0; }
	}

	public class AclContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.AclContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAclContractAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecsSpecSectionParserRuleCall_1_0 = (RuleCall)cSpecsAssignment_1.eContents().get(0);
		
		//AclContract:
		//	{AclContract} specs+=SpecSection*;
		@Override public ParserRule getRule() { return rule; }

		//{AclContract} specs+=SpecSection*
		public Group getGroup() { return cGroup; }

		//{AclContract}
		public Action getAclContractAction_0() { return cAclContractAction_0; }

		//specs+=SpecSection*
		public Assignment getSpecsAssignment_1() { return cSpecsAssignment_1; }

		//SpecSection
		public RuleCall getSpecsSpecSectionParserRuleCall_1_0() { return cSpecsSpecSectionParserRuleCall_1_0; }
	}

	public class SpecSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.SpecSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComputationalModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlowsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SpecSection:
		//	ComputationalModel
		//	| Flows
		//	| Contract;
		@Override public ParserRule getRule() { return rule; }

		//ComputationalModel | Flows | Contract
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComputationalModel
		public RuleCall getComputationalModelParserRuleCall_0() { return cComputationalModelParserRuleCall_0; }

		//Flows
		public RuleCall getFlowsParserRuleCall_1() { return cFlowsParserRuleCall_1; }

		//Contract
		public RuleCall getContractParserRuleCall_2() { return cContractParserRuleCall_2; }
	}

	public class ComputationalModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.ComputationalModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPeriodicComputationalModelAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPeriodicKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cHyperperiodComputationalModelAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyperperiodKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cWithKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cConstraintsAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final CrossReference cConstraintsNamedElementCrossReference_1_3_0_0 = (CrossReference)cConstraintsAssignment_1_3_0.eContents().get(0);
		private final RuleCall cConstraintsNamedElementIDTerminalRuleCall_1_3_0_0_1 = (RuleCall)cConstraintsNamedElementCrossReference_1_3_0_0.eContents().get(1);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final CrossReference cConstraintsNamedElementCrossReference_1_3_1_1_0 = (CrossReference)cConstraintsAssignment_1_3_1_1.eContents().get(0);
		private final RuleCall cConstraintsNamedElementIDTerminalRuleCall_1_3_1_1_0_1 = (RuleCall)cConstraintsNamedElementCrossReference_1_3_1_1_0.eContents().get(1);
		
		//ComputationalModel:
		//	{PeriodicComputationalModel} 'periodic'
		//	| {HyperperiodComputationalModel} 'hyperperiod' 'with' (constraints+=[aadl2::NamedElement] ('<'
		//	constraints+=[aadl2::NamedElement])*);
		@Override public ParserRule getRule() { return rule; }

		//{PeriodicComputationalModel} 'periodic' | {HyperperiodComputationalModel} 'hyperperiod' 'with'
		//(constraints+=[aadl2::NamedElement] ('<' constraints+=[aadl2::NamedElement])*)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PeriodicComputationalModel} 'periodic'
		public Group getGroup_0() { return cGroup_0; }

		//{PeriodicComputationalModel}
		public Action getPeriodicComputationalModelAction_0_0() { return cPeriodicComputationalModelAction_0_0; }

		//'periodic'
		public Keyword getPeriodicKeyword_0_1() { return cPeriodicKeyword_0_1; }

		//{HyperperiodComputationalModel} 'hyperperiod' 'with' (constraints+=[aadl2::NamedElement] ('<'
		//constraints+=[aadl2::NamedElement])*)
		public Group getGroup_1() { return cGroup_1; }

		//{HyperperiodComputationalModel}
		public Action getHyperperiodComputationalModelAction_1_0() { return cHyperperiodComputationalModelAction_1_0; }

		//'hyperperiod'
		public Keyword getHyperperiodKeyword_1_1() { return cHyperperiodKeyword_1_1; }

		//'with'
		public Keyword getWithKeyword_1_2() { return cWithKeyword_1_2; }

		//(constraints+=[aadl2::NamedElement] ('<' constraints+=[aadl2::NamedElement])*)
		public Group getGroup_1_3() { return cGroup_1_3; }

		//constraints+=[aadl2::NamedElement]
		public Assignment getConstraintsAssignment_1_3_0() { return cConstraintsAssignment_1_3_0; }

		//[aadl2::NamedElement]
		public CrossReference getConstraintsNamedElementCrossReference_1_3_0_0() { return cConstraintsNamedElementCrossReference_1_3_0_0; }

		//ID
		public RuleCall getConstraintsNamedElementIDTerminalRuleCall_1_3_0_0_1() { return cConstraintsNamedElementIDTerminalRuleCall_1_3_0_0_1; }

		//('<' constraints+=[aadl2::NamedElement])*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//'<'
		public Keyword getLessThanSignKeyword_1_3_1_0() { return cLessThanSignKeyword_1_3_1_0; }

		//constraints+=[aadl2::NamedElement]
		public Assignment getConstraintsAssignment_1_3_1_1() { return cConstraintsAssignment_1_3_1_1; }

		//[aadl2::NamedElement]
		public CrossReference getConstraintsNamedElementCrossReference_1_3_1_1_0() { return cConstraintsNamedElementCrossReference_1_3_1_1_0; }

		//ID
		public RuleCall getConstraintsNamedElementIDTerminalRuleCall_1_3_1_1_0_1() { return cConstraintsNamedElementIDTerminalRuleCall_1_3_1_1_0_1; }
	}

	public class FlowsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.Flows");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFlowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFlowsFlowParserRuleCall_1_0 = (RuleCall)cFlowsAssignment_1.eContents().get(0);
		
		//Flows:
		//	'flows' flows+=Flow+;
		@Override public ParserRule getRule() { return rule; }

		//'flows' flows+=Flow+
		public Group getGroup() { return cGroup; }

		//'flows'
		public Keyword getFlowsKeyword_0() { return cFlowsKeyword_0; }

		//flows+=Flow+
		public Assignment getFlowsAssignment_1() { return cFlowsAssignment_1; }

		//Flow
		public RuleCall getFlowsFlowParserRuleCall_1_0() { return cFlowsFlowParserRuleCall_1_0; }
	}

	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFlowIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFlowIdIDTerminalRuleCall_0_0 = (RuleCall)cFlowIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSrcPortsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSrcPortsNamedElementCrossReference_2_0 = (CrossReference)cSrcPortsAssignment_2.eContents().get(0);
		private final RuleCall cSrcPortsNamedElementIDTerminalRuleCall_2_0_1 = (RuleCall)cSrcPortsNamedElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSrcPortsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSrcPortsNamedElementCrossReference_3_1_0 = (CrossReference)cSrcPortsAssignment_3_1.eContents().get(0);
		private final RuleCall cSrcPortsNamedElementIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSrcPortsNamedElementCrossReference_3_1_0.eContents().get(1);
		private final Keyword cFunKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDstPortsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cDstPortsNamedElementCrossReference_5_0 = (CrossReference)cDstPortsAssignment_5.eContents().get(0);
		private final RuleCall cDstPortsNamedElementIDTerminalRuleCall_5_0_1 = (RuleCall)cDstPortsNamedElementCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDstPortsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cDstPortsNamedElementCrossReference_6_1_0 = (CrossReference)cDstPortsAssignment_6_1.eContents().get(0);
		private final RuleCall cDstPortsNamedElementIDTerminalRuleCall_6_1_0_1 = (RuleCall)cDstPortsNamedElementCrossReference_6_1_0.eContents().get(1);
		
		//Flow:
		//	=> flowId=ID ':'
		//	srcPorts+=[aadl2::NamedElement] (',' srcPorts+=[aadl2::NamedElement])* '-fun->'
		//	dstPorts+=[aadl2::NamedElement] (',' dstPorts+=[aadl2::NamedElement])*;
		@Override public ParserRule getRule() { return rule; }

		//=> flowId=ID ':' srcPorts+=[aadl2::NamedElement] (',' srcPorts+=[aadl2::NamedElement])* '-fun->'
		//dstPorts+=[aadl2::NamedElement] (',' dstPorts+=[aadl2::NamedElement])*
		public Group getGroup() { return cGroup; }

		//=> flowId=ID
		public Assignment getFlowIdAssignment_0() { return cFlowIdAssignment_0; }

		//ID
		public RuleCall getFlowIdIDTerminalRuleCall_0_0() { return cFlowIdIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//srcPorts+=[aadl2::NamedElement]
		public Assignment getSrcPortsAssignment_2() { return cSrcPortsAssignment_2; }

		//[aadl2::NamedElement]
		public CrossReference getSrcPortsNamedElementCrossReference_2_0() { return cSrcPortsNamedElementCrossReference_2_0; }

		//ID
		public RuleCall getSrcPortsNamedElementIDTerminalRuleCall_2_0_1() { return cSrcPortsNamedElementIDTerminalRuleCall_2_0_1; }

		//(',' srcPorts+=[aadl2::NamedElement])*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//srcPorts+=[aadl2::NamedElement]
		public Assignment getSrcPortsAssignment_3_1() { return cSrcPortsAssignment_3_1; }

		//[aadl2::NamedElement]
		public CrossReference getSrcPortsNamedElementCrossReference_3_1_0() { return cSrcPortsNamedElementCrossReference_3_1_0; }

		//ID
		public RuleCall getSrcPortsNamedElementIDTerminalRuleCall_3_1_0_1() { return cSrcPortsNamedElementIDTerminalRuleCall_3_1_0_1; }

		//'-fun->'
		public Keyword getFunKeyword_4() { return cFunKeyword_4; }

		//dstPorts+=[aadl2::NamedElement]
		public Assignment getDstPortsAssignment_5() { return cDstPortsAssignment_5; }

		//[aadl2::NamedElement]
		public CrossReference getDstPortsNamedElementCrossReference_5_0() { return cDstPortsNamedElementCrossReference_5_0; }

		//ID
		public RuleCall getDstPortsNamedElementIDTerminalRuleCall_5_0_1() { return cDstPortsNamedElementIDTerminalRuleCall_5_0_1; }

		//(',' dstPorts+=[aadl2::NamedElement])*
		public Group getGroup_6() { return cGroup_6; }

		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//dstPorts+=[aadl2::NamedElement]
		public Assignment getDstPortsAssignment_6_1() { return cDstPortsAssignment_6_1; }

		//[aadl2::NamedElement]
		public CrossReference getDstPortsNamedElementCrossReference_6_1_0() { return cDstPortsNamedElementCrossReference_6_1_0; }

		//ID
		public RuleCall getDstPortsNamedElementIDTerminalRuleCall_6_1_0_1() { return cDstPortsNamedElementIDTerminalRuleCall_6_1_0_1; }
	}

	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecsSpecStatementParserRuleCall_1_0 = (RuleCall)cSpecsAssignment_1.eContents().get(0);
		
		//Contract:
		//	'contracts' specs+=SpecStatement+;
		@Override public ParserRule getRule() { return rule; }

		//'contracts' specs+=SpecStatement+
		public Group getGroup() { return cGroup; }

		//'contracts'
		public Keyword getContractsKeyword_0() { return cContractsKeyword_0; }

		//specs+=SpecStatement+
		public Assignment getSpecsAssignment_1() { return cSpecsAssignment_1; }

		//SpecStatement
		public RuleCall getSpecsSpecStatementParserRuleCall_1_0() { return cSpecsSpecStatementParserRuleCall_1_0; }
	}

	public class SpecStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.SpecStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssumeStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAssumeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cForKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cForPortAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final CrossReference cForPortNamedElementCrossReference_0_2_1_0 = (CrossReference)cForPortAssignment_0_2_1.eContents().get(0);
		private final RuleCall cForPortNamedElementIDTerminalRuleCall_0_2_1_0_1 = (RuleCall)cForPortNamedElementCrossReference_0_2_1_0.eContents().get(1);
		private final Assignment cAssumeTitleAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAssumeTitleSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cAssumeTitleAssignment_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cPredAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cPredPREDICATEParserRuleCall_0_5_0 = (RuleCall)cPredAssignment_0_5.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cTracesToKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_6_1 = (Keyword)cGroup_0_6.eContents().get(1);
		private final Assignment cTracesToAssignment_0_6_2 = (Assignment)cGroup_0_6.eContents().get(2);
		private final RuleCall cTracesToIDTerminalRuleCall_0_6_2_0 = (RuleCall)cTracesToAssignment_0_6_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_6_3 = (Keyword)cGroup_0_6.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGuaranteeStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGuaranteeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cGuaranteeTitleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cGuaranteeTitleSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cGuaranteeTitleAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_1_4_0 = (RuleCall)cExprAssignment_1_4.eContents().get(0);
		
		//SpecStatement:
		//	{AssumeStatement} 'assume' ('for' forPort=[aadl2::NamedElement])? assumeTitle=STRING ':' pred=PREDICATE ('tracesTo'
		//	'<' tracesTo=ID '>')?
		//	| {GuaranteeStatement} 'guarantee' guaranteeTitle=STRING ':' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//{AssumeStatement} 'assume' ('for' forPort=[aadl2::NamedElement])? assumeTitle=STRING ':' pred=PREDICATE ('tracesTo' '<'
		//tracesTo=ID '>')? | {GuaranteeStatement} 'guarantee' guaranteeTitle=STRING ':' expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AssumeStatement} 'assume' ('for' forPort=[aadl2::NamedElement])? assumeTitle=STRING ':' pred=PREDICATE ('tracesTo' '<'
		//tracesTo=ID '>')?
		public Group getGroup_0() { return cGroup_0; }

		//{AssumeStatement}
		public Action getAssumeStatementAction_0_0() { return cAssumeStatementAction_0_0; }

		//'assume'
		public Keyword getAssumeKeyword_0_1() { return cAssumeKeyword_0_1; }

		//('for' forPort=[aadl2::NamedElement])?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//'for'
		public Keyword getForKeyword_0_2_0() { return cForKeyword_0_2_0; }

		//forPort=[aadl2::NamedElement]
		public Assignment getForPortAssignment_0_2_1() { return cForPortAssignment_0_2_1; }

		//[aadl2::NamedElement]
		public CrossReference getForPortNamedElementCrossReference_0_2_1_0() { return cForPortNamedElementCrossReference_0_2_1_0; }

		//ID
		public RuleCall getForPortNamedElementIDTerminalRuleCall_0_2_1_0_1() { return cForPortNamedElementIDTerminalRuleCall_0_2_1_0_1; }

		//assumeTitle=STRING
		public Assignment getAssumeTitleAssignment_0_3() { return cAssumeTitleAssignment_0_3; }

		//STRING
		public RuleCall getAssumeTitleSTRINGTerminalRuleCall_0_3_0() { return cAssumeTitleSTRINGTerminalRuleCall_0_3_0; }

		//':'
		public Keyword getColonKeyword_0_4() { return cColonKeyword_0_4; }

		//pred=PREDICATE
		public Assignment getPredAssignment_0_5() { return cPredAssignment_0_5; }

		//PREDICATE
		public RuleCall getPredPREDICATEParserRuleCall_0_5_0() { return cPredPREDICATEParserRuleCall_0_5_0; }

		//('tracesTo' '<' tracesTo=ID '>')?
		public Group getGroup_0_6() { return cGroup_0_6; }

		//'tracesTo'
		public Keyword getTracesToKeyword_0_6_0() { return cTracesToKeyword_0_6_0; }

		//'<'
		public Keyword getLessThanSignKeyword_0_6_1() { return cLessThanSignKeyword_0_6_1; }

		//tracesTo=ID
		public Assignment getTracesToAssignment_0_6_2() { return cTracesToAssignment_0_6_2; }

		//ID
		public RuleCall getTracesToIDTerminalRuleCall_0_6_2_0() { return cTracesToIDTerminalRuleCall_0_6_2_0; }

		//'>'
		public Keyword getGreaterThanSignKeyword_0_6_3() { return cGreaterThanSignKeyword_0_6_3; }

		//{GuaranteeStatement} 'guarantee' guaranteeTitle=STRING ':' expr=Expr
		public Group getGroup_1() { return cGroup_1; }

		//{GuaranteeStatement}
		public Action getGuaranteeStatementAction_1_0() { return cGuaranteeStatementAction_1_0; }

		//'guarantee'
		public Keyword getGuaranteeKeyword_1_1() { return cGuaranteeKeyword_1_1; }

		//guaranteeTitle=STRING
		public Assignment getGuaranteeTitleAssignment_1_2() { return cGuaranteeTitleAssignment_1_2; }

		//STRING
		public RuleCall getGuaranteeTitleSTRINGTerminalRuleCall_1_2_0() { return cGuaranteeTitleSTRINGTerminalRuleCall_1_2_0; }

		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//expr=Expr
		public Assignment getExprAssignment_1_4() { return cExprAssignment_1_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_4_0() { return cExprExprParserRuleCall_1_4_0; }
	}

	public class PREDICATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.PREDICATE");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PREDICATE:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//// TODO 
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.Expr");
		private final RuleCall cImpliesExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	ImpliesExpr;
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall() { return cImpliesExprParserRuleCall; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cImpliesKeyword_1_0_0_1_1 = (Keyword)cAlternatives_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} ('=>' | 'implies')) right=ImpliesExpr)?;
		@Override public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} ('=>' | 'implies')) right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} ('=>' | 'implies')) right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} ('=>' | 'implies'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} ('=>' | 'implies'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//('=>' | 'implies')
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//'implies'
		public Keyword getImpliesKeyword_1_0_0_1_1() { return cImpliesKeyword_1_0_0_1_1; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_0_1_0_0 = (Keyword)cOpAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cOpOrelseKeyword_1_0_0_1_1_0 = (Keyword)cOpAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} (op='or' | op='orelse'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} (op='or' | op='orelse'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//(op='or' | op='orelse')
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//op='or'
		public Assignment getOpAssignment_1_0_0_1_0() { return cOpAssignment_1_0_0_1_0; }

		//'or'
		public Keyword getOpOrKeyword_1_0_0_1_0_0() { return cOpOrKeyword_1_0_0_1_0_0; }

		//op='orelse'
		public Assignment getOpAssignment_1_0_0_1_1() { return cOpAssignment_1_0_0_1_1; }

		//'orelse'
		public Keyword getOpOrelseKeyword_1_0_0_1_1_0() { return cOpOrelseKeyword_1_0_0_1_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cOpAndKeyword_1_0_0_1_0_0 = (Keyword)cOpAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cOpAndthenKeyword_1_0_0_1_1_0 = (Keyword)cOpAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr Expr:
		//	RelationalExpr (=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=RelationalExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//RelationalExpr (=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=RelationalExpr)*
		public Group getGroup() { return cGroup; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=RelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} (op='and' | op='andthen'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} (op='and' | op='andthen'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//(op='and' | op='andthen')
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//op='and'
		public Assignment getOpAssignment_1_0_0_1_0() { return cOpAssignment_1_0_0_1_0; }

		//'and'
		public Keyword getOpAndKeyword_1_0_0_1_0_0() { return cOpAndKeyword_1_0_0_1_0_0; }

		//op='andthen'
		public Assignment getOpAssignment_1_0_0_1_1() { return cOpAssignment_1_0_0_1_1; }

		//'andthen'
		public Keyword getOpAndthenKeyword_1_0_0_1_1_0() { return cOpAndthenKeyword_1_0_0_1_1_0; }

		//right=RelationalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_1_0() { return cRightRelationalExprParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//RelationalOp:
		//	'<' | '<=' | '>' | '>=' | '=' | '<>';
		@Override public ParserRule getRule() { return rule; }

		//'<' | '<=' | '>' | '>=' | '=' | '<>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr Expr:
		//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
		@Override public ParserRule getRule() { return rule; }

		//PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_1_0() { return cRightPlusExprParserRuleCall_1_1_0; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTimesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr Expr:
		//	TimesExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//TimesExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*
		public Group getGroup() { return cGroup; }

		//TimesExpr
		public RuleCall getTimesExprParserRuleCall_0() { return cTimesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('+' | '-'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('+' | '-'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('+' | '-')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=TimesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TimesExpr
		public RuleCall getRightTimesExprParserRuleCall_1_1_0() { return cRightTimesExprParserRuleCall_1_1_0; }
	}

	public class TimesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.TimesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_0_1_0_2 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TimesExpr Expr:
		//	ExpExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//ExpExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*
		public Group getGroup() { return cGroup; }

		//ExpExpr
		public RuleCall getExpExprParserRuleCall_0() { return cExpExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('*' | '/' | '%'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('*' | '/' | '%'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('*' | '/' | '%')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('*' | '/' | '%')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//'%'
		public Keyword getOpPercentSignKeyword_1_0_0_1_0_2() { return cOpPercentSignKeyword_1_0_0_1_0_2; }

		//right=ExpExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ExpExpr
		public RuleCall getRightExpExprParserRuleCall_1_1_0() { return cRightExpExprParserRuleCall_1_1_0; }
	}

	public class ExpExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.ExpExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ExpExpr Expr:
		//	PrefixExpr (=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//PrefixExpr (=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*
		public Group getGroup() { return cGroup; }

		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op='^')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op='^')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='^'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'^'
		public Keyword getOpCircumflexAccentKeyword_1_0_0_1_0() { return cOpCircumflexAccentKeyword_1_0_0_1_0; }

		//right=PrefixExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrefixExpr
		public RuleCall getRightPrefixExprParserRuleCall_1_1_0() { return cRightPrefixExprParserRuleCall_1_1_0; }
	}

	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixExpr Expr:
		//	{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
		//	| AtomicExpr;
		@Override public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=('-' | 'not') expr=PrefixExpr | AtomicExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=('-' | 'not')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//('-' | 'not')
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//'not'
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }

		//AtomicExpr
		public RuleCall getAtomicExprParserRuleCall_1() { return cAtomicExprParserRuleCall_1; }
	}

	public class AtomicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.sireum.aadl.osate.acl.ACL.AtomicExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cIdNamedElementCrossReference_1_0 = (CrossReference)cIdAssignment_1.eContents().get(0);
		private final RuleCall cIdNamedElementQCREFParserRuleCall_1_0_1 = (RuleCall)cIdNamedElementCrossReference_1_0.eContents().get(1);
		
		//AtomicExpr Expr:
		//	{IdExpr} id=[aadl2::NamedElement|QCREF];
		@Override public ParserRule getRule() { return rule; }

		//{IdExpr} id=[aadl2::NamedElement|QCREF]
		public Group getGroup() { return cGroup; }

		//{IdExpr}
		public Action getIdExprAction_0() { return cIdExprAction_0; }

		//id=[aadl2::NamedElement|QCREF]
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//[aadl2::NamedElement|QCREF]
		public CrossReference getIdNamedElementCrossReference_1_0() { return cIdNamedElementCrossReference_1_0; }

		//QCREF
		public RuleCall getIdNamedElementQCREFParserRuleCall_1_0_1() { return cIdNamedElementQCREFParserRuleCall_1_0_1; }
	}
	
	
	private final AnnexSubclauseElements pAnnexSubclause;
	private final AclSubclauseElements pAclSubclause;
	private final AclContractElements pAclContract;
	private final SpecSectionElements pSpecSection;
	private final ComputationalModelElements pComputationalModel;
	private final FlowsElements pFlows;
	private final FlowElements pFlow;
	private final ContractElements pContract;
	private final SpecStatementElements pSpecStatement;
	private final PREDICATEElements pPREDICATE;
	private final ExprElements pExpr;
	private final ImpliesExprElements pImpliesExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final RelationalOpElements pRelationalOp;
	private final RelationalExprElements pRelationalExpr;
	private final PlusExprElements pPlusExpr;
	private final TimesExprElements pTimesExpr;
	private final ExpExprElements pExpExpr;
	private final PrefixExprElements pPrefixExpr;
	private final AtomicExprElements pAtomicExpr;
	
	private final Grammar grammar;

	private final PropertiesGrammarAccess gaProperties;

	@Inject
	public ACLGrammarAccess(GrammarProvider grammarProvider,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaProperties = gaProperties;
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pAclSubclause = new AclSubclauseElements();
		this.pAclContract = new AclContractElements();
		this.pSpecSection = new SpecSectionElements();
		this.pComputationalModel = new ComputationalModelElements();
		this.pFlows = new FlowsElements();
		this.pFlow = new FlowElements();
		this.pContract = new ContractElements();
		this.pSpecStatement = new SpecStatementElements();
		this.pPREDICATE = new PREDICATEElements();
		this.pExpr = new ExprElements();
		this.pImpliesExpr = new ImpliesExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pPlusExpr = new PlusExprElements();
		this.pTimesExpr = new TimesExprElements();
		this.pExpExpr = new ExpExprElements();
		this.pPrefixExpr = new PrefixExprElements();
		this.pAtomicExpr = new AtomicExprElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.sireum.aadl.osate.acl.ACL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	//AnnexSubclause aadl2::AnnexSubclause:
	//	AclSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//AclSubclause:
	//	{AclSubclause} contract=AclContract;
	public AclSubclauseElements getAclSubclauseAccess() {
		return pAclSubclause;
	}
	
	public ParserRule getAclSubclauseRule() {
		return getAclSubclauseAccess().getRule();
	}

	//AclContract:
	//	{AclContract} specs+=SpecSection*;
	public AclContractElements getAclContractAccess() {
		return pAclContract;
	}
	
	public ParserRule getAclContractRule() {
		return getAclContractAccess().getRule();
	}

	//SpecSection:
	//	ComputationalModel
	//	| Flows
	//	| Contract;
	public SpecSectionElements getSpecSectionAccess() {
		return pSpecSection;
	}
	
	public ParserRule getSpecSectionRule() {
		return getSpecSectionAccess().getRule();
	}

	//ComputationalModel:
	//	{PeriodicComputationalModel} 'periodic'
	//	| {HyperperiodComputationalModel} 'hyperperiod' 'with' (constraints+=[aadl2::NamedElement] ('<'
	//	constraints+=[aadl2::NamedElement])*);
	public ComputationalModelElements getComputationalModelAccess() {
		return pComputationalModel;
	}
	
	public ParserRule getComputationalModelRule() {
		return getComputationalModelAccess().getRule();
	}

	//Flows:
	//	'flows' flows+=Flow+;
	public FlowsElements getFlowsAccess() {
		return pFlows;
	}
	
	public ParserRule getFlowsRule() {
		return getFlowsAccess().getRule();
	}

	//Flow:
	//	=> flowId=ID ':'
	//	srcPorts+=[aadl2::NamedElement] (',' srcPorts+=[aadl2::NamedElement])* '-fun->'
	//	dstPorts+=[aadl2::NamedElement] (',' dstPorts+=[aadl2::NamedElement])*;
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}

	//Contract:
	//	'contracts' specs+=SpecStatement+;
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}

	//SpecStatement:
	//	{AssumeStatement} 'assume' ('for' forPort=[aadl2::NamedElement])? assumeTitle=STRING ':' pred=PREDICATE ('tracesTo'
	//	'<' tracesTo=ID '>')?
	//	| {GuaranteeStatement} 'guarantee' guaranteeTitle=STRING ':' expr=Expr;
	public SpecStatementElements getSpecStatementAccess() {
		return pSpecStatement;
	}
	
	public ParserRule getSpecStatementRule() {
		return getSpecStatementAccess().getRule();
	}

	//PREDICATE:
	//	ID;
	public PREDICATEElements getPREDICATEAccess() {
		return pPREDICATE;
	}
	
	public ParserRule getPREDICATERule() {
		return getPREDICATEAccess().getRule();
	}

	//Expr:
	//	ImpliesExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ImpliesExpr Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} ('=>' | 'implies')) right=ImpliesExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return pImpliesExpr;
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} (op='or' | op='orelse')) right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr Expr:
	//	RelationalExpr (=> ({BinaryExpr.left=current} (op='and' | op='andthen')) right=RelationalExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelationalOp:
	//	'<' | '<=' | '>' | '>=' | '=' | '<>';
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//RelationalExpr Expr:
	//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	//PlusExpr Expr:
	//	TimesExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=TimesExpr)*;
	public PlusExprElements getPlusExprAccess() {
		return pPlusExpr;
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//TimesExpr Expr:
	//	ExpExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | '%')) right=ExpExpr)*;
	public TimesExprElements getTimesExprAccess() {
		return pTimesExpr;
	}
	
	public ParserRule getTimesExprRule() {
		return getTimesExprAccess().getRule();
	}

	//ExpExpr Expr:
	//	PrefixExpr (=> ({BinaryExpr.left=current} op='^') right=PrefixExpr)*;
	public ExpExprElements getExpExprAccess() {
		return pExpExpr;
	}
	
	public ParserRule getExpExprRule() {
		return getExpExprAccess().getRule();
	}

	//PrefixExpr Expr:
	//	{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
	//	| AtomicExpr;
	public PrefixExprElements getPrefixExprAccess() {
		return pPrefixExpr;
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}

	//AtomicExpr Expr:
	//	{IdExpr} id=[aadl2::NamedElement|QCREF];
	public AtomicExprElements getAtomicExprAccess() {
		return pAtomicExpr;
	}
	
	public ParserRule getAtomicExprRule() {
		return getAtomicExprAccess().getRule();
	}

	//PModel aadl2::Element:
	//	ContainedPropertyAssociation //| BasicPropertyAssociation | PropertyAssociation
	//;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (AppliesToKeywords appliesTo+=ContainmentPath (','
	//	appliesTo+=ContainmentPath)*)? (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF]
	//	'=>' ownedValue+=PropertyValue ';';
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	//ContainmentPath aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement
	//	//	( 'annex' containmentPathElement+=AnnexPath )?
	//;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression
	//	InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')';
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression (InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')')?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression aadl2::PropertyExpression:
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm
	//	| ComputedTerm | StringTerm | NumericRangeTerm
	//	| RealTerm | IntegerTerm
	//	| ListTerm
	//	| BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?='true' | 'false');
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm aadl2::ReferenceValue:
	//	'reference' '('
	//	path=ContainmentPathElement
	//	//	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	')';
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm aadl2::RecordValue:
	//	'['
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	']';
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm aadl2::RecordValue:
	//	'('
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	')';
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm aadl2::ComputedValue:
	//	'compute' '('
	//	function=ID
	//	')';
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm aadl2::ClassifierValue:
	//	'classifier' '('
	//	classifier=[aadl2::ComponentClassifier|QCREF]
	//	')';
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm aadl2::ListValue:
	//	{aadl2::ListValue}
	//	'(' (ownedListElement+=PropertyExpression (',' ownedListElement+=PropertyExpression)*)?
	//	')';
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty]
	//	'=>'
	//	ownedValue=PropertyExpression
	//	';';
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	//ContainmentPathElement aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange*) ('.' path=ContainmentPathElement)?
	//	//	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	'{' STAR STAR ID STAR STAR '}';
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus aadl2::OperationKind:
	//	'+' | '-';
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString:
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange aadl2::ArrayRange:
	//	{aadl2::ArrayRange}
	//	'[' lowerBound=INTVALUE ('..' upperBound=INTVALUE)?
	//	']';
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaProperties.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt aadl2::Integer:
	//	('+' | '-')? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaProperties.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal aadl2::Real:
	//	('+' | '-')? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm aadl2::RangeValue:
	//	minimum=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	'..' maximum=NumAlt ('delta' delta=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//AppliesToKeywords:
	//	'applies' 'to';
	public PropertiesGrammarAccess.AppliesToKeywordsElements getAppliesToKeywordsAccess() {
		return gaProperties.getAppliesToKeywordsAccess();
	}
	
	public ParserRule getAppliesToKeywordsRule() {
		return getAppliesToKeywordsAccess().getRule();
	}

	//InBindingKeywords:
	//	'in' 'binding';
	public PropertiesGrammarAccess.InBindingKeywordsElements getInBindingKeywordsAccess() {
		return gaProperties.getInBindingKeywordsAccess();
	}
	
	public ParserRule getInBindingKeywordsRule() {
		return getInBindingKeywordsAccess().getRule();
	}

	//InModesKeywords:
	//	'in' 'modes';
	public PropertiesGrammarAccess.InModesKeywordsElements getInModesKeywordsAccess() {
		return gaProperties.getInModesKeywordsAccess();
	}
	
	public ParserRule getInModesKeywordsRule() {
		return getInModesKeywordsAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	('e' | 'E') '+'? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('.' DIGIT+ ('_' DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('#' BASED_INTEGER '#' INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ('_'? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID '::' ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ('::' ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID '::')* ID ('.' ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	'*';
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	//terminal ID:
	//	('a'..'z'
	//	| 'A'..'Z') ('_'? ('a'..'z'
	//	| 'A'..'Z'
	//	| '0'..'9'))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
