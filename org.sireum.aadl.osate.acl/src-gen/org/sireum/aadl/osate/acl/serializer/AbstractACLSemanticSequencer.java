/*
 * generated by Xtext
 */
package org.sireum.aadl.osate.acl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.osate.aadl2.Aadl2Package;
import org.osate.aadl2.ArrayRange;
import org.osate.aadl2.BasicPropertyAssociation;
import org.osate.aadl2.BooleanLiteral;
import org.osate.aadl2.ClassifierValue;
import org.osate.aadl2.ComputedValue;
import org.osate.aadl2.ContainedNamedElement;
import org.osate.aadl2.ContainmentPathElement;
import org.osate.aadl2.IntegerLiteral;
import org.osate.aadl2.ListValue;
import org.osate.aadl2.ModalPropertyValue;
import org.osate.aadl2.NamedValue;
import org.osate.aadl2.Operation;
import org.osate.aadl2.PropertyAssociation;
import org.osate.aadl2.RangeValue;
import org.osate.aadl2.RealLiteral;
import org.osate.aadl2.RecordValue;
import org.osate.aadl2.ReferenceValue;
import org.osate.aadl2.StringLiteral;
import org.osate.xtext.aadl2.properties.serializer.PropertiesSemanticSequencer;
import org.sireum.aadl.osate.acl.aCL.ACLPackage;
import org.sireum.aadl.osate.acl.aCL.AclContract;
import org.sireum.aadl.osate.acl.aCL.AclSubclause;
import org.sireum.aadl.osate.acl.aCL.Contracts;
import org.sireum.aadl.osate.acl.aCL.Flows;
import org.sireum.aadl.osate.acl.aCL.HyperperiodComputationalModel;
import org.sireum.aadl.osate.acl.aCL.PeriodicComputationalModel;
import org.sireum.aadl.osate.acl.services.ACLGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractACLSemanticSequencer extends PropertiesSemanticSequencer {

	@Inject
	private ACLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ACLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ACLPackage.ACL_CONTRACT:
				sequence_AclContract(context, (AclContract) semanticObject); 
				return; 
			case ACLPackage.ACL_SUBCLAUSE:
				sequence_AclSubclause(context, (AclSubclause) semanticObject); 
				return; 
			case ACLPackage.CONTRACTS:
				sequence_Contracts(context, (Contracts) semanticObject); 
				return; 
			case ACLPackage.FLOWS:
				sequence_Flows(context, (Flows) semanticObject); 
				return; 
			case ACLPackage.HYPERPERIOD_COMPUTATIONAL_MODEL:
				sequence_ComputationalModel(context, (HyperperiodComputationalModel) semanticObject); 
				return; 
			case ACLPackage.PERIODIC_COMPUTATIONAL_MODEL:
				sequence_ComputationalModel(context, (PeriodicComputationalModel) semanticObject); 
				return; 
			}
		else if (epackage == Aadl2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Aadl2Package.ARRAY_RANGE:
				sequence_ArrayRange(context, (ArrayRange) semanticObject); 
				return; 
			case Aadl2Package.BASIC_PROPERTY_ASSOCIATION:
				sequence_FieldPropertyAssociation(context, (BasicPropertyAssociation) semanticObject); 
				return; 
			case Aadl2Package.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case Aadl2Package.CLASSIFIER_VALUE:
				sequence_ComponentClassifierTerm(context, (ClassifierValue) semanticObject); 
				return; 
			case Aadl2Package.COMPUTED_VALUE:
				sequence_ComputedTerm(context, (ComputedValue) semanticObject); 
				return; 
			case Aadl2Package.CONTAINED_NAMED_ELEMENT:
				sequence_ContainmentPath(context, (ContainedNamedElement) semanticObject); 
				return; 
			case Aadl2Package.CONTAINMENT_PATH_ELEMENT:
				sequence_ContainmentPathElement(context, (ContainmentPathElement) semanticObject); 
				return; 
			case Aadl2Package.INTEGER_LITERAL:
				sequence_IntegerTerm(context, (IntegerLiteral) semanticObject); 
				return; 
			case Aadl2Package.LIST_VALUE:
				sequence_ListTerm(context, (ListValue) semanticObject); 
				return; 
			case Aadl2Package.MODAL_PROPERTY_VALUE:
				if (rule == grammarAccess.getModalPropertyValueRule()) {
					sequence_ModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOptionalModalPropertyValueRule()) {
					sequence_OptionalModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyValueRule()) {
					sequence_PropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.NAMED_VALUE:
				if (rule == grammarAccess.getConstantValueRule()
						|| rule == grammarAccess.getNumAltRule()) {
					sequence_ConstantValue(context, (NamedValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyExpressionRule()
						|| rule == grammarAccess.getLiteralorReferenceTermRule()) {
					sequence_LiteralorReferenceTerm(context, (NamedValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.OPERATION:
				sequence_SignedConstant(context, (Operation) semanticObject); 
				return; 
			case Aadl2Package.PROPERTY_ASSOCIATION:
				if (rule == grammarAccess.getBasicPropertyAssociationRule()) {
					sequence_BasicPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPModelRule()
						|| rule == grammarAccess.getContainedPropertyAssociationRule()) {
					sequence_ContainedPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyAssociationRule()) {
					sequence_PropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.RANGE_VALUE:
				sequence_NumericRangeTerm(context, (RangeValue) semanticObject); 
				return; 
			case Aadl2Package.REAL_LITERAL:
				sequence_RealTerm(context, (RealLiteral) semanticObject); 
				return; 
			case Aadl2Package.RECORD_VALUE:
				if (rule == grammarAccess.getOldRecordTermRule()) {
					sequence_OldRecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPropertyExpressionRule()
						|| rule == grammarAccess.getRecordTermRule()) {
					sequence_RecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.REFERENCE_VALUE:
				sequence_ReferenceTerm(context, (ReferenceValue) semanticObject); 
				return; 
			case Aadl2Package.STRING_LITERAL:
				sequence_StringTerm(context, (StringLiteral) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AclContract returns AclContract
	 *
	 * Constraint:
	 *     specs+=SpecSection
	 */
	protected void sequence_AclContract(ISerializationContext context, AclContract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnexSubclause returns AclSubclause
	 *     AclSubclause returns AclSubclause
	 *
	 * Constraint:
	 *     contract=AclContract
	 */
	protected void sequence_AclSubclause(ISerializationContext context, AclSubclause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ACLPackage.Literals.ACL_SUBCLAUSE__CONTRACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ACLPackage.Literals.ACL_SUBCLAUSE__CONTRACT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAclSubclauseAccess().getContractAclContractParserRuleCall_1_0(), semanticObject.getContract());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpecSection returns HyperperiodComputationalModel
	 *     ComputationalModel returns HyperperiodComputationalModel
	 *
	 * Constraint:
	 *     relationships=Expr
	 */
	protected void sequence_ComputationalModel(ISerializationContext context, HyperperiodComputationalModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ACLPackage.Literals.HYPERPERIOD_COMPUTATIONAL_MODEL__RELATIONSHIPS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ACLPackage.Literals.HYPERPERIOD_COMPUTATIONAL_MODEL__RELATIONSHIPS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComputationalModelAccess().getRelationshipsExprParserRuleCall_1_0_3_0(), semanticObject.getRelationships());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpecSection returns PeriodicComputationalModel
	 *     ComputationalModel returns PeriodicComputationalModel
	 *
	 * Constraint:
	 *     {PeriodicComputationalModel}
	 */
	protected void sequence_ComputationalModel(ISerializationContext context, PeriodicComputationalModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpecSection returns Contracts
	 *     Contracts returns Contracts
	 *
	 * Constraint:
	 *     {Contracts}
	 */
	protected void sequence_Contracts(ISerializationContext context, Contracts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SpecSection returns Flows
	 *     Flows returns Flows
	 *
	 * Constraint:
	 *     {Flows}
	 */
	protected void sequence_Flows(ISerializationContext context, Flows semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
