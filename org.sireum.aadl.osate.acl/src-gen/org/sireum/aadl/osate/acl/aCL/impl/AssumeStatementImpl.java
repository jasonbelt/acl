/**
 * generated by Xtext 2.20.0
 */
package org.sireum.aadl.osate.acl.aCL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.NamedElement;

import org.sireum.aadl.osate.acl.aCL.ACLPackage;
import org.sireum.aadl.osate.acl.aCL.AssumeStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assume Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sireum.aadl.osate.acl.aCL.impl.AssumeStatementImpl#getForPort <em>For Port</em>}</li>
 *   <li>{@link org.sireum.aadl.osate.acl.aCL.impl.AssumeStatementImpl#getAssumeTitle <em>Assume Title</em>}</li>
 *   <li>{@link org.sireum.aadl.osate.acl.aCL.impl.AssumeStatementImpl#getPred <em>Pred</em>}</li>
 *   <li>{@link org.sireum.aadl.osate.acl.aCL.impl.AssumeStatementImpl#getTracesTo <em>Traces To</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssumeStatementImpl extends SpecStatementImpl implements AssumeStatement
{
  /**
   * The cached value of the '{@link #getForPort() <em>For Port</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForPort()
   * @generated
   * @ordered
   */
  protected NamedElement forPort;

  /**
   * The default value of the '{@link #getAssumeTitle() <em>Assume Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssumeTitle()
   * @generated
   * @ordered
   */
  protected static final String ASSUME_TITLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAssumeTitle() <em>Assume Title</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssumeTitle()
   * @generated
   * @ordered
   */
  protected String assumeTitle = ASSUME_TITLE_EDEFAULT;

  /**
   * The default value of the '{@link #getPred() <em>Pred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPred()
   * @generated
   * @ordered
   */
  protected static final String PRED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPred() <em>Pred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPred()
   * @generated
   * @ordered
   */
  protected String pred = PRED_EDEFAULT;

  /**
   * The default value of the '{@link #getTracesTo() <em>Traces To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTracesTo()
   * @generated
   * @ordered
   */
  protected static final String TRACES_TO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTracesTo() <em>Traces To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTracesTo()
   * @generated
   * @ordered
   */
  protected String tracesTo = TRACES_TO_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssumeStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ACLPackage.Literals.ASSUME_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamedElement getForPort()
  {
    if (forPort != null && ((EObject)forPort).eIsProxy())
    {
      InternalEObject oldForPort = (InternalEObject)forPort;
      forPort = (NamedElement)eResolveProxy(oldForPort);
      if (forPort != oldForPort)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ACLPackage.ASSUME_STATEMENT__FOR_PORT, oldForPort, forPort));
      }
    }
    return forPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NamedElement basicGetForPort()
  {
    return forPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setForPort(NamedElement newForPort)
  {
    NamedElement oldForPort = forPort;
    forPort = newForPort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ACLPackage.ASSUME_STATEMENT__FOR_PORT, oldForPort, forPort));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAssumeTitle()
  {
    return assumeTitle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssumeTitle(String newAssumeTitle)
  {
    String oldAssumeTitle = assumeTitle;
    assumeTitle = newAssumeTitle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ACLPackage.ASSUME_STATEMENT__ASSUME_TITLE, oldAssumeTitle, assumeTitle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPred()
  {
    return pred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPred(String newPred)
  {
    String oldPred = pred;
    pred = newPred;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ACLPackage.ASSUME_STATEMENT__PRED, oldPred, pred));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTracesTo()
  {
    return tracesTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTracesTo(String newTracesTo)
  {
    String oldTracesTo = tracesTo;
    tracesTo = newTracesTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ACLPackage.ASSUME_STATEMENT__TRACES_TO, oldTracesTo, tracesTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ACLPackage.ASSUME_STATEMENT__FOR_PORT:
        if (resolve) return getForPort();
        return basicGetForPort();
      case ACLPackage.ASSUME_STATEMENT__ASSUME_TITLE:
        return getAssumeTitle();
      case ACLPackage.ASSUME_STATEMENT__PRED:
        return getPred();
      case ACLPackage.ASSUME_STATEMENT__TRACES_TO:
        return getTracesTo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ACLPackage.ASSUME_STATEMENT__FOR_PORT:
        setForPort((NamedElement)newValue);
        return;
      case ACLPackage.ASSUME_STATEMENT__ASSUME_TITLE:
        setAssumeTitle((String)newValue);
        return;
      case ACLPackage.ASSUME_STATEMENT__PRED:
        setPred((String)newValue);
        return;
      case ACLPackage.ASSUME_STATEMENT__TRACES_TO:
        setTracesTo((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ACLPackage.ASSUME_STATEMENT__FOR_PORT:
        setForPort((NamedElement)null);
        return;
      case ACLPackage.ASSUME_STATEMENT__ASSUME_TITLE:
        setAssumeTitle(ASSUME_TITLE_EDEFAULT);
        return;
      case ACLPackage.ASSUME_STATEMENT__PRED:
        setPred(PRED_EDEFAULT);
        return;
      case ACLPackage.ASSUME_STATEMENT__TRACES_TO:
        setTracesTo(TRACES_TO_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ACLPackage.ASSUME_STATEMENT__FOR_PORT:
        return forPort != null;
      case ACLPackage.ASSUME_STATEMENT__ASSUME_TITLE:
        return ASSUME_TITLE_EDEFAULT == null ? assumeTitle != null : !ASSUME_TITLE_EDEFAULT.equals(assumeTitle);
      case ACLPackage.ASSUME_STATEMENT__PRED:
        return PRED_EDEFAULT == null ? pred != null : !PRED_EDEFAULT.equals(pred);
      case ACLPackage.ASSUME_STATEMENT__TRACES_TO:
        return TRACES_TO_EDEFAULT == null ? tracesTo != null : !TRACES_TO_EDEFAULT.equals(tracesTo);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (assumeTitle: ");
    result.append(assumeTitle);
    result.append(", pred: ");
    result.append(pred);
    result.append(", tracesTo: ");
    result.append(tracesTo);
    result.append(')');
    return result.toString();
  }

} //AssumeStatementImpl
