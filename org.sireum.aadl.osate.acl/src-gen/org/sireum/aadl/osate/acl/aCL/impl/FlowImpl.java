/**
 * generated by Xtext 2.20.0
 */
package org.sireum.aadl.osate.acl.aCL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.osate.aadl2.NamedElement;

import org.sireum.aadl.osate.acl.aCL.ACLPackage;
import org.sireum.aadl.osate.acl.aCL.Flow;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Flow</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.sireum.aadl.osate.acl.aCL.impl.FlowImpl#getFlowId <em>Flow Id</em>}</li>
 *   <li>{@link org.sireum.aadl.osate.acl.aCL.impl.FlowImpl#getSrcPorts <em>Src Ports</em>}</li>
 *   <li>{@link org.sireum.aadl.osate.acl.aCL.impl.FlowImpl#getDstPorts <em>Dst Ports</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FlowImpl extends MinimalEObjectImpl.Container implements Flow
{
  /**
   * The default value of the '{@link #getFlowId() <em>Flow Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlowId()
   * @generated
   * @ordered
   */
  protected static final String FLOW_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlowId() <em>Flow Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlowId()
   * @generated
   * @ordered
   */
  protected String flowId = FLOW_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getSrcPorts() <em>Src Ports</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrcPorts()
   * @generated
   * @ordered
   */
  protected EList<NamedElement> srcPorts;

  /**
   * The cached value of the '{@link #getDstPorts() <em>Dst Ports</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDstPorts()
   * @generated
   * @ordered
   */
  protected EList<NamedElement> dstPorts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FlowImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ACLPackage.Literals.FLOW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFlowId()
  {
    return flowId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlowId(String newFlowId)
  {
    String oldFlowId = flowId;
    flowId = newFlowId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ACLPackage.FLOW__FLOW_ID, oldFlowId, flowId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NamedElement> getSrcPorts()
  {
    if (srcPorts == null)
    {
      srcPorts = new EObjectResolvingEList<NamedElement>(NamedElement.class, this, ACLPackage.FLOW__SRC_PORTS);
    }
    return srcPorts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NamedElement> getDstPorts()
  {
    if (dstPorts == null)
    {
      dstPorts = new EObjectResolvingEList<NamedElement>(NamedElement.class, this, ACLPackage.FLOW__DST_PORTS);
    }
    return dstPorts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ACLPackage.FLOW__FLOW_ID:
        return getFlowId();
      case ACLPackage.FLOW__SRC_PORTS:
        return getSrcPorts();
      case ACLPackage.FLOW__DST_PORTS:
        return getDstPorts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ACLPackage.FLOW__FLOW_ID:
        setFlowId((String)newValue);
        return;
      case ACLPackage.FLOW__SRC_PORTS:
        getSrcPorts().clear();
        getSrcPorts().addAll((Collection<? extends NamedElement>)newValue);
        return;
      case ACLPackage.FLOW__DST_PORTS:
        getDstPorts().clear();
        getDstPorts().addAll((Collection<? extends NamedElement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ACLPackage.FLOW__FLOW_ID:
        setFlowId(FLOW_ID_EDEFAULT);
        return;
      case ACLPackage.FLOW__SRC_PORTS:
        getSrcPorts().clear();
        return;
      case ACLPackage.FLOW__DST_PORTS:
        getDstPorts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ACLPackage.FLOW__FLOW_ID:
        return FLOW_ID_EDEFAULT == null ? flowId != null : !FLOW_ID_EDEFAULT.equals(flowId);
      case ACLPackage.FLOW__SRC_PORTS:
        return srcPorts != null && !srcPorts.isEmpty();
      case ACLPackage.FLOW__DST_PORTS:
        return dstPorts != null && !dstPorts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (flowId: ");
    result.append(flowId);
    result.append(')');
    return result.toString();
  }

} //FlowImpl
