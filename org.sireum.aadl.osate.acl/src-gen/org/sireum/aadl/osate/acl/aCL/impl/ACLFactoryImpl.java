/**
 * generated by Xtext 2.20.0
 */
package org.sireum.aadl.osate.acl.aCL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.sireum.aadl.osate.acl.aCL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ACLFactoryImpl extends EFactoryImpl implements ACLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ACLFactory init()
  {
    try
    {
      ACLFactory theACLFactory = (ACLFactory)EPackage.Registry.INSTANCE.getEFactory(ACLPackage.eNS_URI);
      if (theACLFactory != null)
      {
        return theACLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ACLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ACLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ACLPackage.ACL_SUBCLAUSE: return createAclSubclause();
      case ACLPackage.CONTRACT: return createContract();
      case ACLPackage.SPEC_SECTION: return createSpecSection();
      case ACLPackage.COMPUTATIONAL_MODEL: return createComputationalModel();
      case ACLPackage.FLOWS: return createFlows();
      case ACLPackage.CONTRACTS: return createContracts();
      case ACLPackage.ACL_CONTRACT: return createAclContract();
      case ACLPackage.PERIODIC_COMPUTATIONAL_MODEL: return createPeriodicComputationalModel();
      case ACLPackage.HYPERPERIOD_COMPUTATIONAL_MODEL: return createHyperperiodComputationalModel();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AclSubclause createAclSubclause()
  {
    AclSubclauseImpl aclSubclause = new AclSubclauseImpl();
    return aclSubclause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecSection createSpecSection()
  {
    SpecSectionImpl specSection = new SpecSectionImpl();
    return specSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComputationalModel createComputationalModel()
  {
    ComputationalModelImpl computationalModel = new ComputationalModelImpl();
    return computationalModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Flows createFlows()
  {
    FlowsImpl flows = new FlowsImpl();
    return flows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contracts createContracts()
  {
    ContractsImpl contracts = new ContractsImpl();
    return contracts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AclContract createAclContract()
  {
    AclContractImpl aclContract = new AclContractImpl();
    return aclContract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeriodicComputationalModel createPeriodicComputationalModel()
  {
    PeriodicComputationalModelImpl periodicComputationalModel = new PeriodicComputationalModelImpl();
    return periodicComputationalModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HyperperiodComputationalModel createHyperperiodComputationalModel()
  {
    HyperperiodComputationalModelImpl hyperperiodComputationalModel = new HyperperiodComputationalModelImpl();
    return hyperperiodComputationalModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ACLPackage getACLPackage()
  {
    return (ACLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ACLPackage getPackage()
  {
    return ACLPackage.eINSTANCE;
  }

} //ACLFactoryImpl
